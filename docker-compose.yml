version: '3.9'

services:
  config:
    image: ghcr.io/buildingsoftwareblocks/exchange-config
    ports:
      - "8888:8888"
    volumes:
      - ./configuration:/configuration

  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.2.8
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  console:
    image: docker.redpanda.com/redpandadata/console:v2.3.1
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: http://connect:8083
    ports:
      - 8181:8080
    depends_on:
      - redpanda

  mongo:
    image: mongo:4
    ports:
      - "17017:27017"
    restart: always
    volumes:
      - ./data/mongo:/data/db

  nginx:
    image: nginx:stable
    profiles: [ "full" ]
    restart: always
    volumes:
      - ./configuration/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
    ports:
      - "8081:4000"

  frontend:
    image: ghcr.io/buildingsoftwareblocks/exchange-frontend
    profiles: [ "full" ]
    ports:
      - "8081"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config:8888
    depends_on:
      config:
        condition: service_started
      redpanda:
        condition: service_started

  backend:
    image: ghcr.io/buildingsoftwareblocks/exchange-backend
    profiles: [ "full" ]
    restart: unless-stopped
    ports:
      - "8082"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config:8888
    depends_on:
      config:
        condition: service_started
      mongo:
        condition: service_started
      redpanda:
        condition: service_started
      zookeeper:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  analysis:
    image: ghcr.io/buildingsoftwareblocks/exchange-analysis
    profiles: [ "full" ]
    ports:
      - "8083"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config:8888
    depends_on:
      config:
        condition: service_started
      redpanda:
        condition: service_started

  #
  # https://github.com/deviantony/docker-elk
  #
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    volumes:
      - ./configuration/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx4g -Xms4g"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  apm:
    image: ghcr.io/buildingsoftwareblocks/apm
    ports:
      - "7777:8080"
    environment:
      APM_RESOLUTION: 30